// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  hashRt            String?
  createdAt         DateTime       @default(now())
  firstName         String
  lastName          String
  avatarImg         String?
  accounts          Accounts[]
  reviews           Reviews[]
  sentTransfers     Transactions[] @relation("Sender")
  receivedTransfers Transactions[] @relation("Recipient")
  operDeals         OpenDeals[]
  isVerify          Boolean?
  accountStatus     String?
}

model Accounts {
  id          Int            @id @default(autoincrement())
  user        User           @relation(fields: [userId], references: [id])
  userId      Int
  accountName String
  currencyId  Currencies     @relation("Currency", fields: [currency], references: [id])
  currency    Int
  balance     Float          @default(0)
  histoty     History[]
  transaction Transactions[] @relation("Accounttransactions")
}

model History {
  id        Int      @id @default(autoincrement())
  accountId Int
  account   Accounts @relation(fields: [accountId], references: [id])
}

model Transactions {
  id         Int        @id @default(autoincrement())
  account    Accounts   @relation("Accounttransactions", fields: [accountId], references: [id])
  accountId  Int
  sender     User       @relation("Sender", fields: [senderId], references: [id])
  senderId   Int
  reciper    User       @relation("Recipient", fields: [reciperId], references: [id])
  reciperId  Int
  currency   Currencies @relation("Transactions", fields: [currencyId], references: [id])
  currencyId Int
  amount     Float
  createdAt  DateTime   @default(now())
  status     String
  hash       String
}

model OpenDeals {
  id               Int        @id @default(autoincrement())
  dealer           User       @relation(fields: [dealerId], references: [id])
  dealerId         Int
  currencyToSell   Currencies @relation("currencytosell", fields: [currencyToSellId], references: [id])
  currencyToSellId Int
  currencyToBuy    Currencies @relation("currencytobuy", fields: [currencyToBuyId], references: [id])
  currencyToBuyId  Int
}

model Currencies {
  id             Int            @id @default(autoincrement())
  name           String
  symbol         String
  currToAccount  Accounts[]     @relation("Currency")
  transactions   Transactions[] @relation("Transactions")
  currencyToSell OpenDeals[]    @relation("currencytosell")
  currencyToBuy  OpenDeals[]    @relation("currencytobuy")
}
model Reviews {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  text      String
  rating    Int
  createdAt DateTime @default(now())
}
